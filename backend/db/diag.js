import mysql2 from 'mysql2/promise';
import dotenv from 'dotenv';
import { exec } from 'child_process';
import { promisify } from 'util';

const execPromise = promisify(exec);

// Charger les variables d'environnement
dotenv.config();

async function diagnoseConnection() {
    console.log('\nüîç DIAGNOSTIC DE CONNEXION MYSQL');
    console.log('=====================================');
    
    // 1. V√©rifier les variables d'environnement
    console.log('\nüìã Configuration actuelle:');
    console.log(`   DB_HOST: ${process.env.DB_HOST || 'localhost'}`);
    console.log(`   DB_PORT: ${process.env.DB_PORT || '3306'}`);
    console.log(`   DB_USER: ${process.env.DB_USER || 'root'}`);
    console.log(`   DB_PASSWORD: ${process.env.DB_PASSWORD ? '***d√©fini***' : '‚ùå NON D√âFINI'}`);
    console.log(`   DB_NAME: ${process.env.DB_NAME || 'pfe'}`);
    
    // 2. V√©rifier si MySQL est en cours d'ex√©cution
    console.log('\nüöÄ V√©rification des services MySQL...');
    try {
        // V√©rifier les processus MySQL
        const { stdout: processes } = await execPromise('tasklist /FI "IMAGENAME eq mysqld.exe"');
        if (processes.includes('mysqld.exe')) {
            console.log('‚úÖ Service MySQL (mysqld.exe) est en cours d\'ex√©cution');
        } else {
            console.log('‚ùå Service MySQL (mysqld.exe) n\'est PAS en cours d\'ex√©cution');
        }
        
        // V√©rifier les ports en √©coute
        const { stdout: netstat } = await execPromise('netstat -an | findstr :3306');
        if (netstat.includes(':3306')) {
            console.log('‚úÖ Port 3306 est en √©coute');
            console.log(`   D√©tails: ${netstat.trim()}`);
        } else {
            console.log('‚ùå Port 3306 n\'est PAS en √©coute');
        }
    } catch (error) {
        console.log('‚ö†Ô∏è  Impossible de v√©rifier les services:', error.message);
    }
    
    // 3. Tester la connexion avec diff√©rentes configurations
    console.log('\nüîå Tests de connexion...');
    
    const configs = [
        {
            name: 'Configuration .env',
            config: {
                host: process.env.DB_HOST || 'localhost',
                port: parseInt(process.env.DB_PORT) || 3306,
                user: process.env.DB_USER || 'root',
                password: process.env.DB_PASSWORD || ''
            }
        },
        {
            name: 'Configuration par d√©faut XAMPP',
            config: {
                host: 'localhost',
                port: 3306,
                user: 'root',
                password: ''
            }
        },
        {
            name: 'Configuration 127.0.0.1',
            config: {
                host: '127.0.0.1',
                port: 3306,
                user: 'root',
                password: ''
            }
        }
    ];
    
    for (const { name, config } of configs) {
        console.log(`\nüì° Test: ${name}`);
        console.log(`   Host: ${config.host}:${config.port}`);
        console.log(`   User: ${config.user}`);
        
        try {
            const connection = await mysql2.createConnection({
                ...config,
                connectTimeout: 5000,
                acquireTimeout: 5000,
                timeout: 5000
            });
            
            const [result] = await connection.execute('SELECT VERSION() as version');
            console.log(`   ‚úÖ SUCC√àS - MySQL version: ${result[0].version}`);
            
            // Tester l'acc√®s √† la base de donn√©es
            try {
                await connection.execute(`USE ${process.env.DB_NAME || 'pfe'}`);
                console.log(`   ‚úÖ Base de donn√©es '${process.env.DB_NAME || 'pfe'}' accessible`);
            } catch (dbError) {
                console.log(`   ‚ö†Ô∏è  Base de donn√©es '${process.env.DB_NAME || 'pfe'}' non accessible:`, dbError.message);
            }
            
            await connection.end();
            break; // Si une config fonctionne, on s'arr√™te
            
        } catch (error) {
            console.log(`   ‚ùå √âCHEC: ${error.code || error.message}`);
            
            if (error.code === 'ECONNREFUSED') {
                console.log('      ‚Üí Connexion refus√©e - MySQL probablement arr√™t√©');
            } else if (error.code === 'ER_ACCESS_DENIED_ERROR') {
                console.log('      ‚Üí Acc√®s refus√© - mauvais utilisateur/mot de passe');
            } else if (error.code === 'ENOTFOUND') {
                console.log('      ‚Üí H√¥te non trouv√© - v√©rifiez l\'adresse');
            }
        }
    }
    
    // 4. Recommandations
    console.log('\nüí° RECOMMANDATIONS:');
    console.log('=====================================');
    console.log('1. V√©rifiez que XAMPP est d√©marr√©');
    console.log('2. Ouvrez le panneau de contr√¥le XAMPP');
    console.log('3. D√©marrez le service MySQL si n√©cessaire');
    console.log('4. V√©rifiez que le port 3306 n\'est pas utilis√© par autre chose');
    console.log('5. Essayez de vous connecter avec phpMyAdmin pour confirmer');
}

// Ex√©cuter le diagnostic
diagnoseConnection().catch(console.error);