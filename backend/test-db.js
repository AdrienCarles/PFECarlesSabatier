import db, {
  sequelize,
  USR,
  ENFA,
  SES,
  ANI,
  ABM,
  PAI,
  ACCES,
  STAT,
  OrthophonisteConfig,
} from './models/index.js';

async function testDatabase() {
  try {
    // Test de connexion
    await sequelize.authenticate();
    console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie!');

    // V√©rification des mod√®les
    await sequelize.sync({ alter: false }); // N'alt√®re pas la base, v√©rifie juste
    console.log('‚úÖ Les mod√®les sont synchronis√©s avec la base de donn√©es');

    // Test des nouveaux champs ABM
    console.log('\nüîç V√©rification des nouveaux champs ABM:');
    const abmModel = ABM.getTableName ? ABM.getTableName() : ABM.tableName;
    console.log(`  - Table: ${abmModel}`);

    // Afficher les attributs ABM
    const abmAttributes = Object.keys(ABM.rawAttributes);
    console.log('  - Attributs ABM:', abmAttributes);

    // V√©rifier les nouveaux champs sp√©cifiquement
    const nouveauxChamps = [
      'ENFA_id',
      'ABM_stripe_subscription_id',
      'ABM_mode_paiement',
    ];
    nouveauxChamps.forEach((champ) => {
      if (abmAttributes.includes(champ)) {
        console.log(`    ‚úÖ ${champ} pr√©sent`);
      } else {
        console.log(`    ‚ùå ${champ} manquant`);
      }
    });

    // Test des nouveaux champs USR
    console.log('\nüîç V√©rification des nouveaux champs USR:');
    const usrAttributes = Object.keys(USR.rawAttributes);
    if (usrAttributes.includes('USR_stripe_customer_id')) {
      console.log('    ‚úÖ USR_stripe_customer_id pr√©sent');
    } else {
      console.log('    ‚ùå USR_stripe_customer_id manquant');
    }

    // Test du nouveau mod√®le OrthophonisteConfig
    console.log('\nüîç V√©rification du mod√®le OrthophonisteConfig:');
    if (OrthophonisteConfig) {
      console.log('    ‚úÖ Mod√®le OrthophonisteConfig charg√©');
      const configAttributes = Object.keys(OrthophonisteConfig.rawAttributes);
      console.log('    - Attributs:', configAttributes);
    } else {
      console.log('    ‚ùå Mod√®le OrthophonisteConfig manquant');
    }

    // V√©rification des associations
    const models = {
      USR: USR.associations,
      ENFA: ENFA.associations,
      SES: SES.associations,
      ANI: ANI.associations,
      ABM: ABM.associations,
      PAI: PAI.associations,
      ACCES: ACCES.associations,
      STAT: STAT.associations,
    };

    // Ajouter OrthophonisteConfig si pr√©sent
    if (OrthophonisteConfig) {
      models.OrthophonisteConfig = OrthophonisteConfig.associations;
    }

    // Afficher les associations pour chaque mod√®le
    for (const [modelName, associations] of Object.entries(models)) {
      console.log(`\nüìä Associations pour ${modelName}:`);
      if (Object.keys(associations).length === 0) {
        console.log('  - Aucune association');
      } else {
        for (const [key, association] of Object.entries(associations)) {
          console.log(
            `  - ${key}: ${association.associationType} avec ${association.target.name}`
          );
        }
      }
    }

    // Test de cr√©ation d'un enregistrement OrthophonisteConfig (pour v√©rifier que tout fonctionne)
    if (OrthophonisteConfig) {
      console.log('\nüß™ Test de cr√©ation OrthophonisteConfig...');
      try {
        // V√©rifier s'il y a des orthophonistes
        const orthophonistes = await USR.findAll({
          where: { USR_role: 'orthophoniste' },
          limit: 1,
        });

        if (orthophonistes.length > 0) {
          const orthoId = orthophonistes[0].USR_id;

          // V√©rifier si la config existe d√©j√†
          const existingConfig = await OrthophonisteConfig.findOne({
            where: { USR_orthophoniste_id: orthoId },
          });

          if (!existingConfig) {
            const testConfig = await OrthophonisteConfig.create({
              USR_orthophoniste_id: orthoId,
              CONFIG_paiement_obligatoire: false,
              CONFIG_prix_par_enfant: 9.99,
            });
            console.log(
              '    ‚úÖ Configuration test cr√©√©e:',
              testConfig.CONFIG_id
            );

            // Supprimer la config test
            await testConfig.destroy();
            console.log('    ‚úÖ Configuration test supprim√©e');
          } else {
            console.log(
              '    ‚úÖ Configuration existante trouv√©e pour cet orthophoniste'
            );
          }
        } else {
          console.log('    ‚ö†Ô∏è Aucun orthophoniste trouv√© pour tester');
        }
      } catch (error) {
        console.log('    ‚ùå Erreur lors du test:', error.message);
      }
    }

    console.log('\nüéâ Tests termin√©s avec succ√®s!');
  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
    console.error('Stack trace:', error.stack);
  } finally {
    try {
      await sequelize.close();
      console.log('‚úÖ Connexion ferm√©e');
    } catch (error) {
      console.error('‚ùå Erreur lors de la fermeture:', error.message);
    }
  }
}

testDatabase();
